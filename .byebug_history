exit
user_response = Faraday.get "https://api.github.com/user" do |req|
      end 
          req.headers["Accept"] = "application/json"
          req.headers["authorization"] = "token 1"
 user_response = Faraday.get "https://api.github.com/user" do |req|
@auth_token.to_hash[:response]
@auth_token.to_hash[:response].request
session[:token].request
session[:token]
@auth_token.to_hash[:response]
@auth_token.to_hash
@auth_token.response
@auth_token.body
@auth_token
exit
@auth_token.to_hash
@auth_token
exit
ENV
ENV["GITHUB_CLIENT_SECRET"]
@auth_token
exit
c
user_response
c
exit
session[:token] = nil
session[:token]
c
@repos
c
repo_response[0]["name"]
repo_response[0]
repo_response
repo_reponse
c
repo_response
exit
repo_reponse
repo_response
exit
user_response.body["login"]
user_response.body
user_response
exit
session[:token] != "redirect_uri_mismatch"
session[:token] != "redirect_uri_mismatch""
session[:token]
session
exit
session[:token]
c
session[:token] 
session[:token] = nil
session[:token]
exit
session[:token] = nil
session[:token]
exit
@username
c
@auth_token
exit
@auth_token
@username
exit
@username["login"]
@username["username"]
@username["username"
@username[:username]
@username
JSON.parse @user_response.body [:username]
JSON.parse @user_response.body
@user_response[:username]
@user_response.body
@user_response
c
@auth_token
exit
@user_response
exit
@user_response
exit
@user_response.body.split("&")[0].split("=")[1]
@user_response.body.split("&")[0].split("=")
@user_response.body.split "&"[0].split("=")
@user_response.body.split "&"[0].split("=
@user_response.body.split "&"[0].split "="
@user_response.body.split "&"[0]
@user_response.body.split "&"
@user_response.body
@user_response
@user_response.body
exit
@user_response.body
@user_response[:auth_token]
@user_response
c
@user_response
c
exit
c
exit
c
exit
@response
@response.response
@response.body
@response.auth_token
@response
exit
@user_response
exit
@user_response
c
@user_response
res
exit
res
exit
@user_response.request
@user_response.req
@user_response
c
exit
@user_response
c
@user_response
c
exit
@user_response[:username]
@user_response
c
req
c
req
c
req
req.url
req.url "/users"
req.url
req
exit
@user_response
session
c
req.headers
req.headers["Authorization"] = "token #{session[:token]}"
req.headers
req
exit
@user_response
exit
@user_response.headers["Authorization"]
@user_response.headers
session[:token]
@user_response.body
@user_response
c
exit
session[:token]
@user_response.body
c
@user_response.body
exit
@user_response.body
@user_response
exit
@user_response
c
session[:token]
headers["Authorization"]
headers
exit
response
response.to_hash
response.to_hash.attributes
response.user
response.body
response
params
exit
params
c
@response[:body]
@response.body
@response.to_hash.keys
exit
params
sessions_params
c
@response
exit
user_response.body
user_response
user_json
params
c
@response[:url].to_s
exit
c
params
c
@response[:url].to_s
@response[:url]
@response
exit
sessions_params[:code]
session[:token]
c
sessions_params[:code]
sessions_params[:code\
session[:token]
c
sessions_params[:code]
session[:token]
exit
session[:token]
exit
session[:token] = nil
session[:token]
user_json
session[:username]
exit
@response.keys
@response
@response["login"]
@response[:login]
c
logged_in?
exit
session[:token] = nil
session
exit
session[:login]
session[:token].nil?eix
session[:token]
session
exit
params
params[:code]
params.permit(:code)
params
exit
headers["client_id"]
exit
@response[:url].to_s
@response[:url].url
@response[:url]
exit
@response[:url]
@response["url"]
@response.keys
exit
@responseexit
